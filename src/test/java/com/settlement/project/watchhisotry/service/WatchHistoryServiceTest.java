package com.settlement.project.watchhisotry.service;


import com.settlement.project.user.entity.User;
import com.settlement.project.video.entity.Video;
import com.settlement.project.video.entity.VideoStatusEnum;
import com.settlement.project.watchhisotry.entity.WatchHistory;
import com.settlement.project.watchhisotry.repository.WatchHistoryRepository;
import com.settlement.project.user.service.UserService;
import com.settlement.project.video.service.VideoService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;

import java.lang.reflect.Field;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class WatchHistoryServiceTest {

    @Mock
    private WatchHistoryRepository watchHistoryRepository;

    @Mock
    private UserService userService;

    @Mock
    private VideoService videoService;

    @Mock
    private RedisTemplate<String, String> redisTemplate;

    @Mock
    private ValueOperations<String, String> valueOperations;

    @InjectMocks
    private WatchHistoryService watchHistoryService;

    private User user;
    private Video video;

    @BeforeEach
    void setUp() {
        user = new User(); // Assume User has a no-arg constructor or use User.builder() if available
        user.setId(1L); // Assume User has a setter for id or modify as needed

        video = Video.builder()
                .user(user)
                .title("Test Video")
                .description("Test Description")
                .videoUrl("http://test.com/video")
                .view(0)
                .status(VideoStatusEnum.ACTIVATE)
                .playTime(600) // 10 minutes
                .build();
        // We can't set id directly, as it's generated by the database.
        // For testing purposes, we can use reflection to set the id if absolutely necessary
        setPrivateField(video, "id", 1L);
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
    }
    private void setPrivateField(Object object, String fieldName, Object fieldValue) {
        try {
            Field field = object.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(object, fieldValue);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            throw new RuntimeException("Error setting private field", e);
        }
    }

    @Test
    void startWatching_WhenRedisHasData_ShouldReturnRedisValue() {
        // Arrange
        when(userService.findUserById(1L)).thenReturn(user);
        when(videoService.getVideoById(1L)).thenReturn(video);
        when(valueOperations.get("watch:1:1")).thenReturn("100");

        // Act
        int result = watchHistoryService.startWatching(1L, 1L);

        // Assert
        assertEquals(100, result);
        verify(valueOperations).set("watch:1:1", "100", 48, TimeUnit.HOURS);
    }

    @Test
    void startWatching_WhenRedisHasNoData_ButDbHas_ShouldReturnDbValue() {
        // Arrange
        WatchHistory watchHistory = WatchHistory.builder()
                .user(user)
                .video(video)
                .watchHistoryTime(200)
                .build();
        when(userService.findUserById(1L)).thenReturn(user);
        when(videoService.getVideoById(1L)).thenReturn(video);
        when(valueOperations.get("watch:1:1")).thenReturn(null);
        when(watchHistoryRepository.findByUserAndVideo(user, video)).thenReturn(Optional.of(watchHistory));

        // Act
        int result = watchHistoryService.startWatching(1L, 1L);

        // Assert
        assertEquals(200, result);
        verify(valueOperations).set("watch:1:1", "200", 48, TimeUnit.HOURS);
    }

    @Test
    void startWatching_WhenNoDataExists_ShouldCreateNewRecord() {
        // Arrange
        when(userService.findUserById(1L)).thenReturn(user);
        when(videoService.getVideoById(1L)).thenReturn(video);
        when(valueOperations.get("watch:1:1")).thenReturn(null);
        when(watchHistoryRepository.findByUserAndVideo(user, video)).thenReturn(Optional.empty());

        // Act
        int result = watchHistoryService.startWatching(1L, 1L);

        // Assert
        assertEquals(0, result);
        verify(watchHistoryRepository).save(any(WatchHistory.class));
        verify(valueOperations).set("watch:1:1", "0", 48, TimeUnit.HOURS);
    }

    @Test
    void updateWatchHistoryTime_ShouldUpdateRedisAndCheckAd() {
        // Act
        watchHistoryService.updateWatchHistoryTime(1L, 1L, 300);

        // Assert
        verify(valueOperations).set("watch:1:1", "300", 48, TimeUnit.HOURS);
        verify(videoService).checkAndPlayAd(1L, 300);  // userId 제거됨
    }

    @Test
    void pauseWatching_WhenRedisHasData_ShouldUpdateDatabase() {
        // Arrange
        WatchHistory watchHistory = WatchHistory.builder()
                .user(user)
                .video(video)
                .watchHistoryTime(0)
                .build();
        when(userService.findUserById(1L)).thenReturn(user);
        when(videoService.getVideoById(1L)).thenReturn(video);
        when(valueOperations.get("watch:1:1")).thenReturn("400");
        when(watchHistoryRepository.findByUserAndVideo(user, video)).thenReturn(Optional.of(watchHistory));

        // Act
        watchHistoryService.pauseWatching(1L, 1L);

        // Assert
        assertEquals(400, watchHistory.getWatchHistoryTime());
        verify(watchHistoryRepository).save(watchHistory);
    }

    @Test
    void pauseWatching_WhenRedisHasNoData_ShouldLogWarning() {
        // Arrange
        when(valueOperations.get("watch:1:1")).thenReturn(null);

        // Act
        watchHistoryService.pauseWatching(1L, 1L);

        // Assert
        verify(watchHistoryRepository, never()).save(any(WatchHistory.class));
    }
}