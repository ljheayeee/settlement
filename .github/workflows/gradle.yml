name: Java CI with Gradle  # 워크플로우의 이름

on:
  push:  # 'push' 이벤트가 발생할 때
    branches: [ "master" ]  # 'master' 브랜치에 대한 푸시 이벤트
  pull_request:  # 'pull_request' 이벤트가 발생할 때
    branches: [ "master" ]  # 'master' 브랜치에 대한 풀 리퀘스트 이벤트

jobs:
  build:  # 빌드 작업 정의
    runs-on: ubuntu-latest  # 최신 Ubuntu 환경에서 실행
    permissions:  # 권한 설정
      contents: read  # 리포지토리의 내용을 읽을 수 있는 권한

    steps:  # 단계 정의 시작
      - uses: actions/checkout@v4  # 코드 리포지토리를 체크아웃하는 액션 사용

      - name: Set up JDK 21  # JDK 21 설정 단계
        uses: actions/setup-java@v4  # Java 설정 액션 사용
        with:
          java-version: '21'  # 사용할 JDK 버전
          distribution: 'corretto'  # Amazon Corretto 배포판 사용

      # Gradle 캐시 설정
      - name: Cache Gradle dependencies  # Gradle 의존성 캐시 단계
        uses: actions/cache@v2  # 캐시 액션 사용
        with:
          path: ~/.gradle/caches  # 캐시할 경로
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}  # 캐시 키
          restore-keys: |  # 캐시 복원 키
            ${{ runner.os }}-gradle-

      - name: Setup Gradle  # Gradle 설정 단계
        uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda  # Gradle 설정 액션 사용

      - name: Build with Gradle  # Gradle 빌드 단계
        run: ./gradlew bootJar  # Gradle Wrapper를 사용하여 bootJar 작업 수행

      - name: make application-database.yaml  # YAML 파일 생성 단계
        run: |  # 여러 줄 명령 실행
          cd ./src/main/resources  # 리소스 디렉토리로 이동
          touch ./application-database.yaml  # 빈 YAML 파일 생성
          echo "${{ secrets.DATABASE }}" >> ./application-database.yaml  # 비밀 값 DATABASE를 파일에 기록
        shell: bash  # 사용할 쉘 설정

      - name: web docker build and push  # Docker 이미지 빌드 및 푸시 단계
        run: |  # 여러 줄 명령 실행
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PW }}  # Docker Hub에 로그인
          docker build -t ljheayeee/settlement_project:latest .  # Docker 이미지 빌드
          docker push ljheayeee/settlement_project:latest  # 빌드한 이미지를 Docker Hub에 푸시

      - name: executing remote ssh commands using password  # 원격 SSH 명령 실행 단계
        uses: appleboy/ssh-action@master  # 안정적인 SSH 액션 사용
        with:  # 액션에 전달할 매개변수
          host: ${{ secrets.HOST }}  # SSH 접속할 호스트
          username: ubuntu  # SSH 접속할 사용자 이름
          key: ${{ secrets.KEY }}  # SSH 접속할 비밀 키
          script: |  # 실행할 스크립트
            sudo docker rm -f $(docker ps -qa)  # 모든 실행 중인 Docker 컨테이너 강제 제거
            sudo docker pull ljheayeee/settlement  # Docker Hub에서 'settlement' 이미지 풀
            sudo docker pull ljheayeee/settlement_project:latest  # Docker Hub에서 'settlement_project' 이미지 풀
            docker-compose up -d  # Docker Compose를 사용하여 서비스 실행
            docker image prune -f  # 사용하지 않는 Docker 이미지를 정리

